/*
 * These types have been auto generated by the openapi-to-types script from the open api specification. If these types
 * are out of date they should be regenerated using that method as the script will overwrite this file.
 * This file was generated on 2020-07-23T20:30:29.656Z.
 */

/**
 * Source: https://github.com/piotrwitek/utility-types
 */
type AugmentedRequired<T extends object,
    K extends keyof T = keyof T> = Omit<T, K> & Required<Pick<T, K>>;

export type EventQuery = {
    name?: string,
    startBefore?: number,
    startAfter?: number,
    endBefore?: number,
    endAfter?: number,
};
export type SuccessfulAPIResponse = {
    status: string,
    result: unknown,
};
export type FailedAPIResponse = {
    status: string,
    error: object,
};
export type CommentUpdate = {
    content: string,
    topic?: string,
};
export type User = {
    name: string,
    username: string,
    profile?: string,
    id: string,
};
export type SignupUpdate = {
    name?: string,
    role?: string,
};
export type FileUpdate = {
    name?: string,
    private?: boolean,
};
export type EntsStateUpdate = {
    name?: string,
    color?: string,
    icon?: string,
};
export type StateUpdate = {
    name?: string,
    icon?: string,
    color?: string,
};
export type EventUpdate = {
    name?: string,
    startDate?: number,
    endDate?: number,
    venue?: string,
    ents?: string,
    state?: string,
};
export type TopicUpdate = {
    name?: string,
    description?: string,
    color?: string,
    icon?: string,
};
export type EventPropertyChangeResponse = {
    id: string,
    occurred: number,
    change: string,
    user?: User,
};
export type EventWithChangelogResponse = {
    event?: EventResponse,
    changelog?: EventPropertyChangeResponse[],
};
export type VenueUpdate = {
    name?: string,
    capacity?: number,
    color?: string,
};
export type CommentResponse = CommentUpdate & {
    id: string,
    posted: number,
    poster: User,
    topic?: TopicResponse,
};
export type EntsStateCreation = Required<EntsStateUpdate>;
export type EventCreation = AugmentedRequired<EventUpdate, 'name' | 'startDate' | 'endDate' | 'venue'>;
export type EventResponse = AugmentedRequired<EventCreation, 'ents' | 'state'> & {
    id: string,
    venue?: VenueResponse,
    ents: EntsStateResponse,
    state: StateResponse,
};
export type FileCreation = AugmentedRequired<FileUpdate, 'name'>;
export type SignupCreation = SignupUpdate & {
    userID?: string,
};
export type StateCreation = AugmentedRequired<StateUpdate, 'name'>;
export type TopicCreation = AugmentedRequired<TopicUpdate, 'name'>;
export type TopicResponse = AugmentedRequired<TopicCreation, 'description' | 'color' | 'icon'> & {
    id: string,
};
export type VenueCreation = AugmentedRequired<VenueUpdate, 'name' | 'capacity'>;
export type VenueResponse = VenueCreation & {
    id: string,
    user: User,
    date: number,
};
export type SignupResponse = AugmentedRequired<SignupCreation, 'name' | 'role'> & {
    id: string,
    user: User,
    date: number,
};
export type FileResponse = AugmentedRequired<FileCreation, 'private'> & {
    id: string,
    filename: string,
    created: number,
    author: User,
    size: number,
    downloadURL: string,
};
export type EntsStateResponse = Required<EntsStateCreation> & {
    id: string,
};
export type StateResponse = AugmentedRequired<StateCreation, 'icon' | 'color'> & {
    id: string,
};