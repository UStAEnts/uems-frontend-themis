/*
* This API have been auto generated by the openapi-to-types script from the open api specification. If this
* is out of date they should be regenerated using that method as the script will overwrite this file.
* This file was generated on 2020-07-25T17:28:27.931Z.
*/

import Axios, { AxiosRequestConfig } from 'axios';
import urljoin from 'url-join';
import * as z from 'zod';
import Config from '../config/Config';
import { ZodError } from "zod";

/*
 * The following sections adds API overrides to the system for use in testing
 */
export type APIOverride = {
    name: string,
    uri: RegExp,
    method: string | string[],
    response?: any,
    generator?: (uri: string, method: string) => any,
}
export const APIOverrides: APIOverride[] = [];

/**
 * Represents a single api function. It is a callable function which takes any number of parameters and returns a typed
 * promise of data from the API
 */
type APIFunction<T> = {
    (...args: any[]): Promise<T>,
    uri: string,
    description: string,
};

/**
 * Binds a callable function taking a URI and any number of parameters returning a typed promise and attaches the uri
 * and description. The passed in function will have the uri bound to it as a parameter meaning that the returned API
 * function will be callable with just the arguments.
 * @param call the function to bind into an API function
 * @param uri the uri that this API function operates on
 * @param description the description of this API endpoint
 */
function bind<T>(
    call: (uri: string, ...args: any[]) => Promise<T>,
    uri: string,
    description: string,
): APIFunction<T> {
    const func = (call.bind(undefined, uri) as unknown) as APIFunction<T>;

    func.description = description;
    func.uri = uri;

    return func;
}

function formatUri(uri: string, substitutions?: { [key: string]: any }): string {
    let result = uri;
    if (substitutions) {
        for (const entry of Object.entries(substitutions)) {
            result = result.replace(`{${entry[0]}}`, encodeURIComponent(entry[1]));
        }
    }

    // Join it on to the gateway URI
    result = urljoin(
        Config.BASE_GATEWAY_URI,
        result,
    );

    return result;
}

function request(uri: string, method: 'get' | 'delete' | 'post' | 'patch', data?: string, options?: AxiosRequestConfig) {
    const override = APIOverrides.find((entry) => entry.uri.test(uri) && entry.method === method);
    if (override) {
        console.debug(`A request to ${uri} was intercepted by API override "${override.name}" to return a fixed response`);
        // Prioritise function generators and fallback to basic responses
        if (override.generator) {
            return Promise.resolve({
                data: override.generator(uri, method),
            });
        }

        if (override.response) {
            return Promise.resolve({
                data: override.response,
            });
        }

        return Promise.reject();
    }

    if (method === 'get' || method === 'delete') {
        return Axios[method](
            uri,
            options,
        );
    }

    return Axios[method](
        uri,
        data,
        options,
    );
}

function datalessRequest<T>(
    uri: string,
    method: 'get' | 'delete',
    substitutions?: { [key: string]: any },
    validator?: z.ZodTypeAny,
) {
    const result = formatUri(uri, substitutions);

    return new Promise<T>((resolve, reject) => {
        request(
            result,
            method,
            undefined,
            {
                headers: {
                    accept: 'application/json',
                },
            },
        ).then((data) => {
            if (!validate(result, data.data, validator, reject)) return;

            if (data.data.status === 'FAIL') {
                reject(new Error(`${data.data.error.message} (${data.data.error.code})`));
                return;
            }

            if (method === 'delete') {
                resolve();
            } else {
                resolve(data.data);
            }
        }).catch(reject);
    });
}

function requestWithData<T, K>(
    uri: string,
    data: K,
    method: 'post' | 'patch',
    substitutions?: { [key: string]: any },
    validator?: z.ZodTypeAny,
): Promise<T> {
    const result = formatUri(uri, substitutions);

    console.trace(`${method} to ${result}`);

    return new Promise<T>((resolve, reject) => {
        request(
            result,
            method,
            JSON.stringify(data),
            {
                headers: {
                    'content-type': 'application/json',
                    accept: 'application/json',
                },
            },
        ).then((resData) => {
            if (!validate(result, resData.data, validator, reject)) return;

            if (resData.data.status === 'FAIL') {
                reject(new Error(`${resData.data.error.message} (${resData.data.error.code})`));
                return;
            }

            resolve(resData.data.result);
        }).catch(reject);
    });
}

/**
 * Basic get request format which substitutes values into the URI (these are URI encoded) and then does a basic AXIOS
 * GET request resolving with the data in a Successful API Response result as defined in the OpenAPI spec. On error the
 * returned promise rejects
 * @param uri a uei which uses {value} as substitution values
 * @param substitutions an object of substitutions, each key will be wrapped in {} and then that string will be replaced
 * with the value in the URI. This are uri encoded but caution should still be given for user input
 */
function getRequest<T>(
    uri: string,
    substitutions?: { [key: string]: any },
    validator?: z.ZodTypeAny,
): Promise<T> {
    return datalessRequest<T>(uri, 'get', substitutions, validator);
}

function deleteRequest<T>(
    uri: string,
    substitutions?: { [key: string]: any },
    validator?: z.ZodTypeAny,
): Promise<T> {
    return datalessRequest<T>(uri, 'delete', substitutions, validator);
}

const validate = (uri: string, data: any, validator: z.ZodTypeAny | undefined, reject: (err: Error) => any) => {
    // If a validator was provided, check it and reject if the format is wrong
    if (validator && !validator.check(data)) {
        // If it doesn't work we need to parse it to get the errors
        try {
            validator.parse(data);
        } catch (e) {
            if (e instanceof ZodError) {
                console.warn(`Invalid data received on ${uri}. Parsed to produce errors`);
                console.warn('Received data:');
                console.warn(data);
                console.warn(`  Message: ${e.message}`);

                for (const err of e.errors) {
                    console.warn(`  == Suberror: ${err.code}`);
                    console.warn(`    Message: ${err.message}`);
                    console.warn(`    @: ${err.path}`);
                }
            }
        }
        reject(new Error('Received an invalid response from the server (doesn\'t match API type)'));
        return false;
    }

    return true;
};

function postRequest<T, K>(
    uri: string,
    data: K,
    substitutions?: { [key: string]: any },
    validator?: z.ZodTypeAny,
) {
    return requestWithData<T, K>(uri, data, 'post', substitutions, validator);
}

function patchRequest<T, K>(
    uri: string,
    data: K,
    substitutions?: { [key: string]: any },
    validator?: z.ZodTypeAny,
) {
    return requestWithData<T, K>(uri, data, 'patch', substitutions, validator);
}

export const EventQueryZod = z.object({
    name: z.string().optional(),
    startBefore: z.number().optional(),
    startAfter: z.number().optional(),
    endBefore: z.number().optional(),
    endAfter: z.number().optional(),
});
export type EventQuery = z.infer<typeof EventQueryZod>;
export const SuccessfulAPIResponseZod = z.object({
    status: z.string(),
    result: z.unknown(),
});
export type SuccessfulAPIResponse = z.infer<typeof SuccessfulAPIResponseZod>;
export const FailedAPIResponseZod = z.object({
    status: z.string(),
    error: z.any(),
});
export type FailedAPIResponse = z.infer<typeof FailedAPIResponseZod>;
export const CommentUpdateZod = z.object({
    content: z.string(),
    topic: z.string().optional(),
});
export type CommentUpdate = z.infer<typeof CommentUpdateZod>;
export const UserZod = z.object({
    name: z.string(),
    username: z.string(),
    profile: z.string().optional(),
    id: z.string(),
});
export type User = z.infer<typeof UserZod>;
export const SignupUpdateZod = z.object({
    name: z.string().optional(),
    role: z.string().optional(),
});
export type SignupUpdate = z.infer<typeof SignupUpdateZod>;
export const FileUpdateZod = z.object({
    name: z.string().optional(),
    private: z.boolean().optional(),
});
export type FileUpdate = z.infer<typeof FileUpdateZod>;
export const EntsStateUpdateZod = z.object({
    name: z.string().optional(),
    color: z.string().optional(),
    icon: z.string().optional(),
});
export type EntsStateUpdate = z.infer<typeof EntsStateUpdateZod>;
export const StateUpdateZod = z.object({
    name: z.string().optional(),
    icon: z.string().optional(),
    color: z.string().optional(),
});
export type StateUpdate = z.infer<typeof StateUpdateZod>;
export const EventUpdateZod = z.object({
    name: z.string().optional(),
    startDate: z.number().optional(),
    endDate: z.number().optional(),
    venue: z.string().optional(),
    ents: z.string().optional(),
    state: z.string().optional(),
    attendance: z.number().optional(),
    color: z.string().optional(),
});
export type EventUpdate = z.infer<typeof EventUpdateZod>;
export const TopicUpdateZod = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    color: z.string().optional(),
    icon: z.string().optional(),
});
export type TopicUpdate = z.infer<typeof TopicUpdateZod>;
export const EventPropertyChangeResponseZod = z.object({
    id: z.string(),
    occurred: z.number(),
    change: z.string(),
    user: UserZod.optional(),
});
export type EventPropertyChangeResponse = z.infer<typeof EventPropertyChangeResponseZod>;
export const VenueUpdateZod = z.object({
    name: z.string().optional(),
    capacity: z.number().optional(),
    color: z.string().optional(),
});
export type VenueUpdate = z.infer<typeof VenueUpdateZod>;
export const EntsStateCreationZod = EntsStateUpdateZod.extend({
    name: z.string(),
    color: z.string(),
    icon: z.string(),
});
export type EntsStateCreation = z.infer<typeof EntsStateCreationZod>;
export const EventCreationZod = EventUpdateZod.extend({
    name: z.string(),
    startDate: z.number(),
    endDate: z.number(),
    venue: z.string(),
    attendance: z.number(),
});
export type EventCreation = z.infer<typeof EventCreationZod>;
export const FileCreationZod = FileUpdateZod.extend({
    name: z.string(),
});
export type FileCreation = z.infer<typeof FileCreationZod>;
export const SignupCreationZod = SignupUpdateZod.extend({
    userID: z.string().optional(),
});
export type SignupCreation = z.infer<typeof SignupCreationZod>;
export const StateCreationZod = StateUpdateZod.extend({
    name: z.string(),
});
export type StateCreation = z.infer<typeof StateCreationZod>;
export const TopicCreationZod = TopicUpdateZod.extend({
    name: z.string(),
});
export type TopicCreation = z.infer<typeof TopicCreationZod>;
export const TopicResponseZod = TopicCreationZod.extend({
    id: z.string(),
});
export type TopicResponse = z.infer<typeof TopicResponseZod>;
export const CommentResponseZod = CommentUpdateZod.extend({
    topic: TopicResponseZod.optional(),
    id: z.string(),
    posted: z.number(),
    poster: UserZod,
});
export type CommentResponse = z.infer<typeof CommentResponseZod>;
export const VenueCreationZod = VenueUpdateZod.extend({
    name: z.string(),
    capacity: z.number(),
});
export type VenueCreation = z.infer<typeof VenueCreationZod>;
export const VenueResponseZod = VenueCreationZod.extend({
    id: z.string(),
    user: UserZod,
    date: z.number(),
});
export type VenueResponse = z.infer<typeof VenueResponseZod>;
export const SignupResponseZod = SignupCreationZod.extend({
    id: z.string(),
    user: UserZod,
    date: z.number(),
});
export type SignupResponse = z.infer<typeof SignupResponseZod>;
export const FileResponseZod = FileCreationZod.extend({
    id: z.string(),
    filename: z.string(),
    created: z.number(),
    author: UserZod,
    size: z.number(),
    downloadURL: z.string(),
});
export type FileResponse = z.infer<typeof FileResponseZod>;
export const EntsStateResponseZod = EntsStateCreationZod.extend({
    id: z.string(),
});
export type EntsStateResponse = z.infer<typeof EntsStateResponseZod>;
export const StateResponseZod = StateCreationZod.extend({
    id: z.string(),
});
export type StateResponse = z.infer<typeof StateResponseZod>;
export const EventResponseZod = EventCreationZod.extend({
    venue: VenueResponseZod.optional(),
    ents: EntsStateResponseZod,
    state: StateResponseZod,
    id: z.string(),
});
export type EventResponse = z.infer<typeof EventResponseZod>;
export const EventWithChangelogResponseZod = z.object({
    event: EventResponseZod.optional(),
    changelog: z.array(EventPropertyChangeResponseZod).optional(),
});
export type EventWithChangelogResponse = z.infer<typeof EventWithChangelogResponseZod>;
//= ==============
export const GetEventAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(EventResponseZod),
});
export type GetEventAPIResponse = z.infer<typeof GetEventAPIResponseZod>;
export const CreateEventAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: EventResponseZod,
});
export type CreateEventAPIResponse = z.infer<typeof CreateEventAPIResponseZod>;
export const GetEventsIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: EventWithChangelogResponseZod,
});
export type GetEventsIdAPIResponse = z.infer<typeof GetEventsIdAPIResponseZod>;
export const UpdateEventAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: EventResponseZod,
});
export type UpdateEventAPIResponse = z.infer<typeof UpdateEventAPIResponseZod>;
export const GetEventsIdCommentsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(CommentResponseZod),
});
export type GetEventsIdCommentsAPIResponse = z.infer<typeof GetEventsIdCommentsAPIResponseZod>;
export const PostEventsIdCommentsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: CommentResponseZod,
});
export type PostEventsIdCommentsAPIResponse = z.infer<typeof PostEventsIdCommentsAPIResponseZod>;
export const GetEventsIdCommentsCommentAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: CommentResponseZod,
});
export type GetEventsIdCommentsCommentAPIResponse = z.infer<typeof GetEventsIdCommentsCommentAPIResponseZod>;
export const PatchEventsIdCommentsCommentAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: CommentResponseZod,
});
export type PatchEventsIdCommentsCommentAPIResponse = z.infer<typeof PatchEventsIdCommentsCommentAPIResponseZod>;
export const GetEventsIdFilesAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(FileResponseZod),
});
export type GetEventsIdFilesAPIResponse = z.infer<typeof GetEventsIdFilesAPIResponseZod>;
export const PostEventsIdFilesAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: FileResponseZod,
});
export type PostEventsIdFilesAPIResponse = z.infer<typeof PostEventsIdFilesAPIResponseZod>;
export const GetEventsIdFilesFileAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(FileResponseZod),
});
export type GetEventsIdFilesFileAPIResponse = z.infer<typeof GetEventsIdFilesFileAPIResponseZod>;
export const GetEventsIdSignupsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(SignupResponseZod),
});
export type GetEventsIdSignupsAPIResponse = z.infer<typeof GetEventsIdSignupsAPIResponseZod>;
export const PostEventsIdSignupsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: SignupResponseZod,
});
export type PostEventsIdSignupsAPIResponse = z.infer<typeof PostEventsIdSignupsAPIResponseZod>;
export const GetEventsIdSignupsSignupAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: SignupResponseZod,
});
export type GetEventsIdSignupsSignupAPIResponse = z.infer<typeof GetEventsIdSignupsSignupAPIResponseZod>;
export const PatchEventsIdSignupsSignupAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: SignupResponseZod,
});
export type PatchEventsIdSignupsSignupAPIResponse = z.infer<typeof PatchEventsIdSignupsSignupAPIResponseZod>;
export const GetFilesAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(FileResponseZod),
});
export type GetFilesAPIResponse = z.infer<typeof GetFilesAPIResponseZod>;
export const PostFilesAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.unknown(),
});
export type PostFilesAPIResponse = z.infer<typeof PostFilesAPIResponseZod>;
export const GetFilesIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: FileResponseZod,
});
export type GetFilesIdAPIResponse = z.infer<typeof GetFilesIdAPIResponseZod>;
export const PatchFilesIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: FileResponseZod,
});
export type PatchFilesIdAPIResponse = z.infer<typeof PatchFilesIdAPIResponseZod>;
export const GetFilesIdEventsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(EventResponseZod),
});
export type GetFilesIdEventsAPIResponse = z.infer<typeof GetFilesIdEventsAPIResponseZod>;
export const GetFilesIdCommentsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(CommentResponseZod),
});
export type GetFilesIdCommentsAPIResponse = z.infer<typeof GetFilesIdCommentsAPIResponseZod>;
export const PostFilesIdCommentsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: CommentResponseZod,
});
export type PostFilesIdCommentsAPIResponse = z.infer<typeof PostFilesIdCommentsAPIResponseZod>;
export const GetFilesIdCommentsCommentAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: CommentResponseZod,
});
export type GetFilesIdCommentsCommentAPIResponse = z.infer<typeof GetFilesIdCommentsCommentAPIResponseZod>;
export const PatchFilesIdCommentsCommentAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: CommentResponseZod,
});
export type PatchFilesIdCommentsCommentAPIResponse = z.infer<typeof PatchFilesIdCommentsCommentAPIResponseZod>;
export const GetUsersAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(UserZod),
});
export type GetUsersAPIResponse = z.infer<typeof GetUsersAPIResponseZod>;
export const GetUsersIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: UserZod,
});
export type GetUsersIdAPIResponse = z.infer<typeof GetUsersIdAPIResponseZod>;
export const GetEntsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(EntsStateResponseZod),
});
export type GetEntsAPIResponse = z.infer<typeof GetEntsAPIResponseZod>;
export const PostEntsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: EntsStateResponseZod,
});
export type PostEntsAPIResponse = z.infer<typeof PostEntsAPIResponseZod>;
export const GetEntsIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: EntsStateResponseZod,
});
export type GetEntsIdAPIResponse = z.infer<typeof GetEntsIdAPIResponseZod>;
export const PatchEntsIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: EntsStateResponseZod,
});
export type PatchEntsIdAPIResponse = z.infer<typeof PatchEntsIdAPIResponseZod>;
export const GetStatesAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(StateResponseZod),
});
export type GetStatesAPIResponse = z.infer<typeof GetStatesAPIResponseZod>;
export const PostStatesAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: StateResponseZod,
});
export type PostStatesAPIResponse = z.infer<typeof PostStatesAPIResponseZod>;
export const GetStatesIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: StateResponseZod,
});
export type GetStatesIdAPIResponse = z.infer<typeof GetStatesIdAPIResponseZod>;
export const PatchStatesIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: StateResponseZod,
});
export type PatchStatesIdAPIResponse = z.infer<typeof PatchStatesIdAPIResponseZod>;
export const GetStatesIdEventsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(EventResponseZod),
});
export type GetStatesIdEventsAPIResponse = z.infer<typeof GetStatesIdEventsAPIResponseZod>;
export const GetTopicsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(TopicResponseZod),
});
export type GetTopicsAPIResponse = z.infer<typeof GetTopicsAPIResponseZod>;
export const PostTopicsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: TopicResponseZod,
});
export type PostTopicsAPIResponse = z.infer<typeof PostTopicsAPIResponseZod>;
export const GetTopicsIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: TopicResponseZod,
});
export type GetTopicsIdAPIResponse = z.infer<typeof GetTopicsIdAPIResponseZod>;
export const PatchTopicsIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: TopicResponseZod,
});
export type PatchTopicsIdAPIResponse = z.infer<typeof PatchTopicsIdAPIResponseZod>;
export const GetVenueAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(VenueResponseZod),
});
export type GetVenueAPIResponse = z.infer<typeof GetVenueAPIResponseZod>;
export const PostVenueAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: VenueResponseZod,
});
export type PostVenueAPIResponse = z.infer<typeof PostVenueAPIResponseZod>;
export const GetVenueIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: VenueResponseZod,
});
export type GetVenueIdAPIResponse = z.infer<typeof GetVenueIdAPIResponseZod>;
export const PatchVenueIdAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: VenueResponseZod,
});
export type PatchVenueIdAPIResponse = z.infer<typeof PatchVenueIdAPIResponseZod>;
export const GetVenuesIdEventsAPIResponseZod = SuccessfulAPIResponseZod.extend({
    result: z.array(EventResponseZod),
});
export type GetVenuesIdEventsAPIResponse = z.infer<typeof GetVenuesIdEventsAPIResponseZod>;
//= ============
export type APIType = {
    events: {
        get: () => Promise<GetEventAPIResponse>,
        post: (body: EventCreation) => Promise<CreateEventAPIResponse>,
        id: {
            get: (id: string) => Promise<GetEventsIdAPIResponse>,
            patch: (id: string, body: EventUpdate) => Promise<UpdateEventAPIResponse>,
            delete: (id: string) => Promise<void>,
            comments: {
                get: (id: string) => Promise<GetEventsIdCommentsAPIResponse>,
                post: (id: string, body: CommentUpdate) => Promise<PostEventsIdCommentsAPIResponse>,
                id: {
                    get: (id: string, comment: string) => Promise<GetEventsIdCommentsCommentAPIResponse>,
                    patch: (id: string, comment: string, body: CommentUpdate)
                        => Promise<PatchEventsIdCommentsCommentAPIResponse>,
                    delete: (id: string, comment: string) => Promise<void>
                }
            },
            files: {
                get: (id: string) => Promise<GetEventsIdFilesAPIResponse>,
                post: (id: string, body: object) => Promise<PostEventsIdFilesAPIResponse>,
                id: {
                    get: (id: string, file: string) => Promise<GetEventsIdFilesFileAPIResponse>,
                    delete: (id: string, file: string) => Promise<void>
                }
            },
            signups: {
                get: (id: string) => Promise<GetEventsIdSignupsAPIResponse>,
                post: (id: string, body: SignupCreation) => Promise<PostEventsIdSignupsAPIResponse>,
                id: {
                    get: (id: string, signup: string) => Promise<GetEventsIdSignupsSignupAPIResponse>,
                    patch: (id: string, signup: string, body: SignupUpdate)
                        => Promise<PatchEventsIdSignupsSignupAPIResponse>,
                    delete: (id: string, signup: string) => Promise<void>
                }
            }
        }
    },
    files: {
        get: () => Promise<GetFilesAPIResponse>,
        post: (body: FileCreation) => Promise<PostFilesAPIResponse>,
        id: {
            get: (id: string) => Promise<GetFilesIdAPIResponse>,
            patch: (id: string, body: FileUpdate) => Promise<PatchFilesIdAPIResponse>,
            delete: (id: string) => Promise<void>,
            events: {
                get: (id: string) => Promise<GetFilesIdEventsAPIResponse>
            },
            comments: {
                get: (id: string) => Promise<GetFilesIdCommentsAPIResponse>,
                post: (id: string, body: CommentUpdate) => Promise<PostFilesIdCommentsAPIResponse>,
                id: {
                    get: (id: string, comment: string) => Promise<GetFilesIdCommentsCommentAPIResponse>,
                    patch: (id: string, comment: string, body: CommentUpdate)
                        => Promise<PatchFilesIdCommentsCommentAPIResponse>,
                    delete: (id: string, comment: string) => Promise<void>
                }
            }
        }
    },
    users: {
        get: () => Promise<GetUsersAPIResponse>,
        id: {
            get: (id: string) => Promise<GetUsersIdAPIResponse>

        }
    },
    ents: {
        get: () => Promise<GetEntsAPIResponse>,
        post: (body: EntsStateCreation) => Promise<PostEntsAPIResponse>,
        id: {
            get: (id: string) => Promise<GetEntsIdAPIResponse>,
            patch: (id: string, body: EntsStateUpdate) => Promise<PatchEntsIdAPIResponse>,
            delete: (id: string) => Promise<void>
        }
    },
    states: {
        get: () => Promise<GetStatesAPIResponse>,
        post: (body: StateCreation) => Promise<PostStatesAPIResponse>,
        id: {
            get: (id: string) => Promise<GetStatesIdAPIResponse>,
            patch: (id: string, body: StateUpdate) => Promise<PatchStatesIdAPIResponse>,
            delete: (id: string) => Promise<void>,
            events: {
                get: (id: string) => Promise<GetStatesIdEventsAPIResponse>
            }
        }
    },
    topics: {
        get: () => Promise<GetTopicsAPIResponse>,
        post: (body: unknown) => Promise<PostTopicsAPIResponse>,
        id: {
            get: (id: string) => Promise<GetTopicsIdAPIResponse>,
            patch: (id: string, body: TopicUpdate) => Promise<PatchTopicsIdAPIResponse>,
            delete: (id: string) => Promise<void>
        }
    },
    venues: {
        get: () => Promise<GetVenueAPIResponse>,
        post: (body: VenueCreation) => Promise<PostVenueAPIResponse>,
        id: {
            get: (id: string) => Promise<GetVenueIdAPIResponse>,
            patch: (id: string, body: VenueUpdate) => Promise<PatchVenueIdAPIResponse>,
            delete: (id: string) => Promise<void>,
            events: {
                get: (id: string) => Promise<GetVenuesIdEventsAPIResponse>
            }
        }
    }
}

export const API: APIType = {
    events: {
        get:
            bind<GetEventAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetEventAPIResponse>(
                    uri,
                    {},
                    GetEventAPIResponseZod,
                ),
                '/events',
                'Retrieves the event',
            ),
        post:
            bind<CreateEventAPIResponse>(
                (
                    uri: string,
                    body: EventCreation,
                ) => postRequest<CreateEventAPIResponse, typeof body>(
                    uri,
                    body,
                    {},
                    CreateEventAPIResponseZod,
                ),
                '/events',
                'Creates an event',
            ),
        id: {
            get:
                bind<GetEventsIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetEventsIdAPIResponse>(
                        uri,
                        { id },
                        GetEventsIdAPIResponseZod,
                    ),
                    '/events/{id}',
                    'Retrieves a single event',
                ),
            patch:
                bind<UpdateEventAPIResponse>(
                    (
                        uri: string,
                        id: string,
                        body: EventUpdate,
                    ) => patchRequest<UpdateEventAPIResponse, typeof body>(
                        uri,
                        body,
                        { id },
                        UpdateEventAPIResponseZod,
                    ),
                    '/events/{id}',
                    'Updates an event',
                ),
            delete:
                bind<void>(
                    (
                        uri: string,
                        id: string,
                    ) => deleteRequest<void>(
                        uri,
                        { id },
                    ),
                    '/events/{id}',
                    'Deletes an event',
                ),
            comments: {
                get:
                    bind<GetEventsIdCommentsAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetEventsIdCommentsAPIResponse>(
                            uri,
                            { id },
                            GetEventsIdCommentsAPIResponseZod,
                        ),
                        '/events/{id}/comments',
                        'Fetches all comments on an event',
                    ),
                post:
                    bind<PostEventsIdCommentsAPIResponse>(
                        (
                            uri: string,
                            id: string,
                            body: CommentUpdate,
                        ) => postRequest<PostEventsIdCommentsAPIResponse, typeof body>(
                            uri,
                            body,
                            { id },
                            PostEventsIdCommentsAPIResponseZod,
                        ),
                        '/events/{id}/comments',
                        'Creates a new comment on an event',
                    ),
                id: {
                    get:
                        bind<GetEventsIdCommentsCommentAPIResponse>(
                            (
                                uri: string, id: string, comment: string,
                            ) => getRequest<GetEventsIdCommentsCommentAPIResponse>(
                                uri,
                                { id, comment },
                                GetEventsIdCommentsCommentAPIResponseZod,
                            ),
                            '/events/{id}/comments/{comment}',
                            'Retrieves a single comment on an event',
                        ),
                    patch:
                        bind<PatchEventsIdCommentsCommentAPIResponse>(
                            (
                                uri: string,
                                id: string, comment: string,
                                body: CommentUpdate,
                            ) => patchRequest<PatchEventsIdCommentsCommentAPIResponse, typeof body>(
                                uri,
                                body,
                                { id, comment },
                                PatchEventsIdCommentsCommentAPIResponseZod,
                            ),
                            '/events/{id}/comments/{comment}',
                            'Edits a given comment on a given event',
                        ),
                    delete:
                        bind<void>(
                            (
                                uri: string,
                                id: string, comment: string,
                            ) => deleteRequest<void>(
                                uri,
                                { id, comment },
                            ),
                            '/events/{id}/comments/{comment}',
                            'Deletes the comment from the event',
                        ),
                },
            },
            files: {
                get:
                    bind<GetEventsIdFilesAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetEventsIdFilesAPIResponse>(
                            uri,
                            { id },
                            GetEventsIdFilesAPIResponseZod,
                        ),
                        '/events/{id}/files',
                        'Gets the list of files for this event',
                    ),
                post:
                    bind<PostEventsIdFilesAPIResponse>(
                        (
                            uri: string,
                            id: string,
                            body: object,
                        ) => postRequest<PostEventsIdFilesAPIResponse, typeof body>(
                            uri,
                            body,
                            { id },
                            PostEventsIdFilesAPIResponseZod,
                        ),
                        '/events/{id}/files',
                        'Links a new file to this event',
                    ),
                id: {
                    get:
                        bind<GetEventsIdFilesFileAPIResponse>(
                            (
                                uri: string, id: string, file: string,
                            ) => getRequest<GetEventsIdFilesFileAPIResponse>(
                                uri,
                                { id, file },
                                GetEventsIdFilesFileAPIResponseZod,
                            ),
                            '/events/{id}/files/{file}',
                            'Retrieves a single file from an event',
                        ),
                    delete:
                        bind<void>(
                            (
                                uri: string,
                                id: string, file: string,
                            ) => deleteRequest<void>(
                                uri,
                                { id, file },
                            ),
                            '/events/{id}/files/{file}',
                            'Unlinks a file from an event',
                        ),
                },
            },
            signups: {
                get:
                    bind<GetEventsIdSignupsAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetEventsIdSignupsAPIResponse>(
                            uri,
                            { id },
                            GetEventsIdSignupsAPIResponseZod,
                        ),
                        '/events/{id}/signups',
                        'Retrieves the full list of signups for this event',
                    ),
                post:
                    bind<PostEventsIdSignupsAPIResponse>(
                        (
                            uri: string,
                            id: string,
                            body: SignupCreation,
                        ) => postRequest<PostEventsIdSignupsAPIResponse, typeof body>(
                            uri,
                            body,
                            { id },
                            PostEventsIdSignupsAPIResponseZod,
                        ),
                        '/events/{id}/signups',
                        'Adds a new signup to this event',
                    ),
                id: {
                    get:
                        bind<GetEventsIdSignupsSignupAPIResponse>(
                            (
                                uri: string, id: string, signup: string,
                            ) => getRequest<GetEventsIdSignupsSignupAPIResponse>(
                                uri,
                                { id, signup },
                                GetEventsIdSignupsSignupAPIResponseZod,
                            ),
                            '/events/{id}/signups/{signup}',
                            'Retrieves properties about a given signup',
                        ),
                    patch:
                        bind<PatchEventsIdSignupsSignupAPIResponse>(
                            (
                                uri: string,
                                id: string, signup: string,
                                body: SignupUpdate,
                            ) => patchRequest<PatchEventsIdSignupsSignupAPIResponse, typeof body>(
                                uri,
                                body,
                                { id, signup },
                                PatchEventsIdSignupsSignupAPIResponseZod,
                            ),
                            '/events/{id}/signups/{signup}',
                            'Updates a signup on this event',
                        ),
                    delete:
                        bind<void>(
                            (
                                uri: string,
                                id: string, signup: string,
                            ) => deleteRequest<void>(
                                uri,
                                { id, signup },
                            ),
                            '/events/{id}/signups/{signup}',
                            'Deletes a signup on this event',
                        ),
                },
            },
        },
    },
    files: {
        get:
            bind<GetFilesAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetFilesAPIResponse>(
                    uri,
                    {},
                    GetFilesAPIResponseZod,
                ),
                '/files',
                'Retrieves all files on the server',
            ),
        post:
            bind<PostFilesAPIResponse>(
                (
                    uri: string,
                    body: FileCreation,
                ) => postRequest<PostFilesAPIResponse, typeof body>(
                    uri,
                    body,
                    {},
                    PostFilesAPIResponseZod,
                ),
                '/files',
                '',
            ),
        id: {
            get:
                bind<GetFilesIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetFilesIdAPIResponse>(
                        uri,
                        { id },
                        GetFilesIdAPIResponseZod,
                    ),
                    '/files/{id}',
                    'Retrieves this files properties',
                ),
            patch:
                bind<PatchFilesIdAPIResponse>(
                    (
                        uri: string,
                        id: string,
                        body: FileUpdate,
                    ) => patchRequest<PatchFilesIdAPIResponse, typeof body>(
                        uri,
                        body,
                        { id },
                        PatchFilesIdAPIResponseZod,
                    ),
                    '/files/{id}',
                    'Updates the file properties',
                ),
            delete:
                bind<void>(
                    (
                        uri: string,
                        id: string,
                    ) => deleteRequest<void>(
                        uri,
                        { id },
                    ),
                    '/files/{id}',
                    'Deletes this file',
                ),
            events: {
                get:
                    bind<GetFilesIdEventsAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetFilesIdEventsAPIResponse>(
                            uri,
                            { id },
                            GetFilesIdEventsAPIResponseZod,
                        ),
                        '/files/{id}/events',
                        'Retrieve events associated with this file',
                    ),
            },
            comments: {
                get:
                    bind<GetFilesIdCommentsAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetFilesIdCommentsAPIResponse>(
                            uri,
                            { id },
                            GetFilesIdCommentsAPIResponseZod,
                        ),
                        '/files/{id}/comments',
                        'Retrieve all comments on this file',
                    ),
                post:
                    bind<PostFilesIdCommentsAPIResponse>(
                        (
                            uri: string,
                            id: string,
                            body: CommentUpdate,
                        ) => postRequest<PostFilesIdCommentsAPIResponse, typeof body>(
                            uri,
                            body,
                            { id },
                            PostFilesIdCommentsAPIResponseZod,
                        ),
                        '/files/{id}/comments',
                        'Adds a new comment to this file',
                    ),
                id: {
                    get:
                        bind<GetFilesIdCommentsCommentAPIResponse>(
                            (
                                uri: string, id: string, comment: string,
                            ) => getRequest<GetFilesIdCommentsCommentAPIResponse>(
                                uri,
                                { id, comment },
                                GetFilesIdCommentsCommentAPIResponseZod,
                            ),
                            '/files/{id}/comments/{comment}',
                            'Retrieves only this comment',
                        ),
                    patch:
                        bind<PatchFilesIdCommentsCommentAPIResponse>(
                            (
                                uri: string,
                                id: string, comment: string,
                                body: CommentUpdate,
                            ) => patchRequest<PatchFilesIdCommentsCommentAPIResponse, typeof body>(
                                uri,
                                body,
                                { id, comment },
                                PatchFilesIdCommentsCommentAPIResponseZod,
                            ),
                            '/files/{id}/comments/{comment}',
                            'Update this comment',
                        ),
                    delete:
                        bind<void>(
                            (
                                uri: string,
                                id: string, comment: string,
                            ) => deleteRequest<void>(
                                uri,
                                { id, comment },
                            ),
                            '/files/{id}/comments/{comment}',
                            'Delete this comment',
                        ),
                },
            },
        },
    },
    users: {
        get:
            bind<GetUsersAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetUsersAPIResponse>(
                    uri,
                    {},
                    GetUsersAPIResponseZod,
                ),
                '/users',
                'Retrieves all registered users',
            ),
        id: {
            get:
                bind<GetUsersIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetUsersIdAPIResponse>(
                        uri,
                        { id },
                        GetUsersIdAPIResponseZod,
                    ),
                    '/users/{id}',
                    'Retrieves this user',
                ),
        },
    },
    ents: {
        get:
            bind<GetEntsAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetEntsAPIResponse>(
                    uri,
                    {},
                    GetEntsAPIResponseZod,
                ),
                '/ents',
                'Gets the full list of ents states',
            ),
        post:
            bind<PostEntsAPIResponse>(
                (
                    uri: string,
                    body: EntsStateCreation,
                ) => postRequest<PostEntsAPIResponse, typeof body>(
                    uri,
                    body,
                    {},
                    PostEntsAPIResponseZod,
                ),
                '/ents',
                'Creates a new ents state',
            ),
        id: {
            get:
                bind<GetEntsIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetEntsIdAPIResponse>(
                        uri,
                        { id },
                        GetEntsIdAPIResponseZod,
                    ),
                    '/ents/{id}',
                    'Retrieves a single ents state',
                ),
            patch:
                bind<PatchEntsIdAPIResponse>(
                    (
                        uri: string,
                        id: string,
                        body: EntsStateUpdate,
                    ) => patchRequest<PatchEntsIdAPIResponse, typeof body>(
                        uri,
                        body,
                        { id },
                        PatchEntsIdAPIResponseZod,
                    ),
                    '/ents/{id}',
                    'Updates a single ents state',
                ),
            delete:
                bind<void>(
                    (
                        uri: string,
                        id: string,
                    ) => deleteRequest<void>(
                        uri,
                        { id },
                    ),
                    '/ents/{id}',
                    'Deletes this ents state',
                ),
        },
    },
    states: {
        get:
            bind<GetStatesAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetStatesAPIResponse>(
                    uri,
                    {},
                    GetStatesAPIResponseZod,
                ),
                '/states',
                'Retrieves all available ents states',
            ),
        post:
            bind<PostStatesAPIResponse>(
                (
                    uri: string,
                    body: StateCreation,
                ) => postRequest<PostStatesAPIResponse, typeof body>(
                    uri,
                    body,
                    {},
                    PostStatesAPIResponseZod,
                ),
                '/states',
                'Creates a new event state',
            ),
        id: {
            get:
                bind<GetStatesIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetStatesIdAPIResponse>(
                        uri,
                        { id },
                        GetStatesIdAPIResponseZod,
                    ),
                    '/states/{id}',
                    'Retrieves a single state',
                ),
            patch:
                bind<PatchStatesIdAPIResponse>(
                    (
                        uri: string,
                        id: string,
                        body: StateUpdate,
                    ) => patchRequest<PatchStatesIdAPIResponse, typeof body>(
                        uri,
                        body,
                        { id },
                        PatchStatesIdAPIResponseZod,
                    ),
                    '/states/{id}',
                    'Update this state',
                ),
            delete:
                bind<void>(
                    (
                        uri: string,
                        id: string,
                    ) => deleteRequest<void>(
                        uri,
                        { id },
                    ),
                    '/states/{id}',
                    'Delete this state',
                ),
            events: {
                get:
                    bind<GetStatesIdEventsAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetStatesIdEventsAPIResponse>(
                            uri,
                            { id },
                            GetStatesIdEventsAPIResponseZod,
                        ),
                        '/states/{id}/events',
                        'Retrieves all events with this state',
                    ),
            },
        },
    },
    topics: {
        get:
            bind<GetTopicsAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetTopicsAPIResponse>(
                    uri,
                    {},
                    GetTopicsAPIResponseZod,
                ),
                '/topics',
                'Returns all topics',
            ),
        post:
            bind<PostTopicsAPIResponse>(
                (
                    uri: string,
                    body: unknown,
                ) => postRequest<PostTopicsAPIResponse, typeof body>(
                    uri,
                    body,
                    {},
                    PostTopicsAPIResponseZod,
                ),
                '/topics',
                'Creates a new topic',
            ),
        id: {
            get:
                bind<GetTopicsIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetTopicsIdAPIResponse>(
                        uri,
                        { id },
                        GetTopicsIdAPIResponseZod,
                    ),
                    '/topics/{id}',
                    'Returns a single topic',
                ),
            patch:
                bind<PatchTopicsIdAPIResponse>(
                    (
                        uri: string,
                        id: string,
                        body: TopicUpdate,
                    ) => patchRequest<PatchTopicsIdAPIResponse, typeof body>(
                        uri,
                        body,
                        { id },
                        PatchTopicsIdAPIResponseZod,
                    ),
                    '/topics/{id}',
                    'Updates this topic',
                ),
            delete:
                bind<void>(
                    (
                        uri: string,
                        id: string,
                    ) => deleteRequest<void>(
                        uri,
                        { id },
                    ),
                    '/topics/{id}',
                    'Deletes this topic',
                ),
        },
    },
    venues: {
        get:
            bind<GetVenueAPIResponse>(
                (
                    uri: string,
                ) => getRequest<GetVenueAPIResponse>(
                    uri,
                    {},
                    GetVenueAPIResponseZod,
                ),
                '/venues',
                'Retrieves all venues',
            ),
        post:
            bind<PostVenueAPIResponse>(
                (
                    uri: string,
                    body: VenueCreation,
                ) => postRequest<PostVenueAPIResponse, typeof body>(
                    uri,
                    body,
                    {},
                    PostVenueAPIResponseZod,
                ),
                '/venues',
                'Creates a new venue',
            ),
        id: {
            get:
                bind<GetVenueIdAPIResponse>(
                    (
                        uri: string, id: string,
                    ) => getRequest<GetVenueIdAPIResponse>(
                        uri,
                        { id },
                        GetVenueIdAPIResponseZod,
                    ),
                    '/venues/{id}',
                    'Retrieves a single venue',
                ),
            patch:
                bind<PatchVenueIdAPIResponse>(
                    (
                        uri: string,
                        id: string,
                        body: VenueUpdate,
                    ) => patchRequest<PatchVenueIdAPIResponse, typeof body>(
                        uri,
                        body,
                        { id },
                        PatchVenueIdAPIResponseZod,
                    ),
                    '/venues/{id}',
                    'Updates an venue',
                ),
            delete:
                bind<void>(
                    (
                        uri: string,
                        id: string,
                    ) => deleteRequest<void>(
                        uri,
                        { id },
                    ),
                    '/venues/{id}',
                    'Deletes a venue',
                ),
            events: {
                get:
                    bind<GetVenuesIdEventsAPIResponse>(
                        (
                            uri: string, id: string,
                        ) => getRequest<GetVenuesIdEventsAPIResponse>(
                            uri,
                            { id },
                            GetVenuesIdEventsAPIResponseZod,
                        ),
                        '/venues/{id}/events',
                        'Retrieves all events with this venue',
                    ),
            },
        },
    },
};
